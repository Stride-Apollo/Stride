#############################################################################
#  This file is part of the Stride software.
#  It is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or any
#  later version.
#  The software is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  You should have received a copy of the GNU General Public License,
#  along with the software. If not, see <http://www.gnu.org/licenses/>.
#  see http://www.gnu.org/licenses/.
#
#  Copyright 2016, Willem L, Kuylen E & Broeckhove J
#############################################################################
#
#  This file contains the C++ compile & link configuration.
#  It is meant to be included in the src/CMakeLists.txt and
#  to provide identical C++ configuration for the main/cpp
#  and the test/ccp directories and subdirectories.
#
#############################################################################

#----------------------------------------------------------------------------
# Check CMAKE_BUILD_TYPE
#----------------------------------------------------------------------------
if( NOT (CMAKE_BUILD_TYPE MATCHES "Release" OR CMAKE_BUILD_TYPE MATCHES "Debug") )
	message(FATAL_ERROR  "========> CMAKE_BUILD_TYPE HAS TO MATCH EITHER Release OR Debug." )
endif()

#----------------------------------------------------------------------------
# Compile flags
#----------------------------------------------------------------------------
set( CMAKE_CXX_FLAGS         "${CMAKE_CXX_FLAGS} ${MPI_COMPILE_FLAGS} -Wall -Wno-unknown-pragmas -Wno-array-bounds -Wno-unused-private-field -Wno-sign-compare" )
set( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast" )
set( CMAKE_CXX_FLAGS_DEBUG   "${CMAKE_CXX_FLAGS_DEBUG} -O0"   )

#----------------------------------------------------------------------------
# Platform dependent compile flags
#----------------------------------------------------------------------------
if( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND CMAKE_HOST_APPLE )
	add_definitions( -D__APPLE__ )
	set( CMAKE_CXX_FLAGS           "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
elseif( CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND NOT CMAKE_HOST_APPLE )
	set( CMAKE_CXX_FLAGS           "${CMAKE_CXX_FLAGS} -std=c++11")
	add_definitions( -D__extern_always_inline=inline )
elseif( CMAKE_CXX_COMPILER_ID STREQUAL "GNU" )
	set( CMAKE_CXX_FLAGS 	       "${CMAKE_CXX_FLAGS} -fPIC -std=c++11" )
	set( CMAKE_C_FLAGS             "${CMAKE_C_FLAGS} -fPIC" )
endif()
#
include_directories( ${CMAKE_HOME_DIRECTORY}/main/cpp             )

#----------------------------------------------------------------------------
# Standard math lib
#----------------------------------------------------------------------------
set( LIBS   ${LIBS}   m )

#----------------------------------------------------------------------------
# TCLAP Library (command line processing)
#----------------------------------------------------------------------------
include_directories( SYSTEM ${CMAKE_HOME_DIRECTORY}/main/resources/lib/tclap/include )

#----------------------------------------------------------------------------
# MPI Library (message passing interface)
#----------------------------------------------------------------------------
find_package(MPI REQUIRED)
include_directories(MPI_INCLUDE_PATH)

#----------------------------------------------------------------------------
# Spdlog Library (logging)
#----------------------------------------------------------------------------
include_directories( SYSTEM ${CMAKE_HOME_DIRECTORY}/main/resources/lib/spdlog/include )

#----------------------------------------------------------------------------
# Tina's Random Number Generator (TRNG) library and paths
#----------------------------------------------------------------------------
include_directories( SYSTEM ${CMAKE_HOME_DIRECTORY}/main/resources/lib/trng-4.15/include )
#set( LIBS ${LIBS} trng )

#----------------------------------------------------------------------------
# Boost
#----------------------------------------------------------------------------
set(BOOST_ROOT ${STRIDE_BOOST_ROOT})
find_package( Boost COMPONENTS filesystem thread date_time system REQUIRED )
include_directories(SYSTEM ${Boost_INCLUDE_DIRS} )
set( LIBS   ${LIBS} ${Boost_LIBRARIES} )

#----------------------------------------------------------------------------
# Unified Parallelization
#----------------------------------------------------------------------------
if( STRIDE_UNIPAR STREQUAL "OPENMP" )
    if ( NOT DEFINED HAVE_CHECKED_OpenMP )
        set( HAVE_CHECKED_OpenMP  TRUE  CACHE  BOOL  "Have checked for OpenMP?" FORCE )
        find_package( ProperOpenMP )
        if( OPENMP_FOUND )
            set( HAVE_FOUND_OpenMP  TRUE  CACHE  BOOL  "Have found OpenMP?" FORCE )
        else()
            set( HAVE_FOUND_OpenMP  FALSE  CACHE  BOOL  "Have found OpenMP?" FORCE )
        endif()
    endif()
    if ( HAVE_FOUND_OpenMP )
        set( OPENMP_FOUND TRUE )
        set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" )
        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" )
        message( "OpenMP CXX Flags ${OpenMP_CXX_FLAGS}" )
    endif()
    if( NOT OPENMP_FOUND )
        message( FATAL_ERROR "OpenMP wasn't found. Consider using another Unipar implementation." )
    endif()
    add_definitions( -DUNIPAR_IMPL_OPENMP )
elseif( STRIDE_UNIPAR STREQUAL "TBB" )
    # FindTBB used from here: https://github.com/justusc/FindTBB
	find_package( TBB )
	if( NOT TBB_FOUND )
		message( FATAL_ERROR "TBB wasn't found. Consider using another Unipar implementation." )
	endif()
	add_definitions( ${TBB_DEFINITIONS} )
	include_directories( ${TBB_INCLUDE_DIRS} )
	add_definitions( -DUNIPAR_IMPL_TBB )
    set( LIBS ${LIBS} ${TBB_LIBRARIES})
else()
    if( STRIDE_UNIPAR STREQUAL "DUMMY" )
        message( "Using DUMMY Unipar implementation (no parallelization)." )
    else()
        message( "No proper Unipar implementation was specified, using DUMMY (no parallelization)." )
    endif()
    add_definitions( -DUNIPAR_IMPL_DUMMY )
endif()

# Always needed
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread" )

#----------------------------------------------------------------------------
# HDF5 Library
# Try to find the C variant of libhdf5, if found, USE_HDF5 is defined
# and passed to the compilers to allow compilation of selective features
# through preprocessor commands like #ifdef USE_HDF5 and friends.
# Additional defs are required on Ubuntu where lib are installed
# with hdf5 v1.6 as default behavior.
#----------------------------------------------------------------------------
# Source: https://github.com/bast/hdf5-cmake-example/blob/master/CMakeLists.txt
if( STRIDE_FORCE_NO_HDF5 )
	message( STATUS "---> Skipping HDF5, STRIDE_FORCE_NO_HDF5 set.")
else()
	find_package(HDF5 COMPONENTS CXX)
	if(HDF5_FOUND)
		include_directories(${HDF5_INCLUDE_DIRS})
	else()
		# we did not find it so we fetch it from the web, configure, compile, and link
		include(ExternalProject)
		set(ExternalProjectCMakeArgs
			-DHDF5_BUILD_CPP_LIB=ON
			)

		set(_hdf5_version "1.8.18")
		file(MAKE_DIRECTORY ${CMAKE_HOME_DIRECTORY}/hdf5_local/src)
		ExternalProject_Add(hdf5_local
			DOWNLOAD_COMMAND curl https://support.hdfgroup.org/ftp/HDF5/current18/src/hdf5-${_hdf5_version}.tar.gz | tar xvz -C ${CMAKE_HOME_DIRECTORY}/hdf5_local/src
			CMAKE_ARGS ${ExternalProjectCMakeArgs}
			SOURCE_DIR ${CMAKE_HOME_DIRECTORY}/hdf5_local/src/hdf5-${_hdf5_version}
			BINARY_DIR ${CMAKE_HOME_DIRECTORY}/hdf5_local/build
			STAMP_DIR  ${CMAKE_HOME_DIRECTORY}/hdf5_local/stamp
			TMP_DIR    ${CMAKE_HOME_DIRECTORY}/hdf5_local/tmp
			INSTALL_COMMAND ""
			)
		include_directories(
			${CMAKE_HOME_DIRECTORY}/hdf5_local/src/hdf5-${_hdf5_version}/src
			${CMAKE_HOME_DIRECTORY}/hdf5_local/src/hdf5-${_hdf5_version}/c++/src
			${CMAKE_HOME_DIRECTORY}/hdf5_local/build
			)
		set(HDF5_LIBRARIES
			${CMAKE_HOME_DIRECTORY}/hdf5_local/build/bin/libhdf5_cpp.a
			${CMAKE_HOME_DIRECTORY}/hdf5_local/build/bin/libhdf5.a
			-ldl
			)
	endif()
	set( LIBS ${LIBS} ${HDF5_LIBRARIES} ${HDF5_CXX_LIBRARIES} ${HDF5_HL_LIBRARIES})
	add_definitions( -DHDF5_USED )
endif()

#############################################################################
